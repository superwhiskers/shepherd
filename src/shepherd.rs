use petgraph::visit::IntoNeighbors;
use serde::{Deserialize, Serialize};
use std::{
    ffi::OsStr,
    process::{Child, ChildStdin, ChildStdout, Command, Stdio},
};

use crate::{
    feed::{Feed, Responses},
    graph::Simulation,
    ids::{GraphId, SheepId, TagId},
    simulation::Epoch,
};

/// A wrapper around a child process which implements a feed algorithm
pub struct Shepherd<'de> {
    process: Child,
    stdin: ChildStdin,
    stdout: serde_json::StreamDeserializer<
        'de,
        serde_json::de::IoRead<ChildStdout>,
        ShepherdEvent,
    >,
}

impl<'de> Shepherd<'de> {
    /// Create a new [`Shepherd`] from a command name or path
    pub fn new(program: impl AsRef<OsStr>) -> Self {
        let mut process = Command::new(program)
            .stdin(Stdio::piped())
            .stdout(Stdio::piped())
            .spawn()
            .expect("Unable to spawn a shepherd process");

        let stdin = process.stdin.take().expect(
            "Unable to extract the stdin handle from the shepherd process",
        );
        let stdout = process.stdout.take().expect(
            "Unable to extract the stdout handle from the shepherd process",
        );

        Self {
            process,
            stdin,
            stdout: serde_json::Deserializer::from_reader(stdout).into_iter(),
        }
    }

    /// Write an arbitrary [`SimulationEvent`] to this [`Shepherd`]'s
    /// standard input
    pub fn write_event(&mut self, event: &SimulationEvent) {
        serde_json::to_writer(&self.stdin, event)
            .expect("Unable to pass an event to the shepherd process")
    }

    /// Read the next [`ShepherdEvent`] from this [`Shepherd`]'s
    /// standard output
    pub fn read_event(&mut self) -> ShepherdEvent {
        self.stdout
            .next()
            .expect("Unable to read an event from the shepherd process")
            .expect("Unable to read an event from the shepherd process")
    }

    /// Request that this [`Shepherd`] build a feed for the specified sheep
    /// and wait for it to return the feed
    pub fn build_feed(&mut self, sheep: SheepId) -> Feed {
        self.write_event(&SimulationEvent::FeedRequest(sheep));
        match self.read_event() {
            ShepherdEvent::Feed(feed) => feed,
            event => panic!(
                "Unexpected event kind returned to build_feed call: {:?}",
                event
            ),
        }
    }

    /// Give this [`Shepherd`] responses to a feed generated by it for the
    /// specified sheep
    pub fn incorporate_responses(
        &mut self,
        sheep: SheepId,
        responses: Responses,
    ) {
        self.write_event(&SimulationEvent::FeedResponses { sheep, responses })
    }

    /// Notify this [`Shepherd`] of the start of a new epoch
    pub fn begin(&mut self, epoch: Epoch) {
        self.write_event(&SimulationEvent::BeginEpoch(epoch))
    }

    /// Introduce this [`Shepherd`] to a sheep
    pub fn introduce_to(&mut self, graph: &Simulation, sheep: SheepId) {
        self.write_event(&SimulationEvent::SheepIntroduction {
            sheep,
            associated_tags: graph.associated_tags(sheep).collect(),
        })
    }
}

#[derive(Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]
#[serde(tag = "kind")]
pub enum SimulationEvent {
    BeginEpoch(Epoch),
    SheepIntroduction {
        sheep: SheepId,
        associated_tags: Vec<TagId>,
    },
    FeedRequest(SheepId),
    FeedResponses {
        sheep: SheepId,
        responses: Responses,
    },
}

#[derive(Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]
#[serde(tag = "kind")]
pub enum ShepherdEvent {
    Feed(Feed),
}
