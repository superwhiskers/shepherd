#![allow(clippy::cognitive_complexity)]
#![warn(clippy::cargo_common_metadata)]
#![warn(clippy::dbg_macro)]
#![warn(clippy::explicit_deref_methods)]
#![warn(clippy::filetype_is_file)]
#![warn(clippy::imprecise_flops)]
#![warn(clippy::large_stack_arrays)]
#![warn(clippy::todo)]
#![warn(clippy::unimplemented)]
#![deny(clippy::await_holding_lock)]
#![deny(clippy::cast_lossless)]
#![deny(clippy::clone_on_ref_ptr)]
#![deny(clippy::doc_markdown)]
#![deny(clippy::empty_enum)]
#![deny(clippy::enum_glob_use)]
#![deny(clippy::exit)]
#![deny(clippy::explicit_into_iter_loop)]
#![deny(clippy::explicit_iter_loop)]
#![deny(clippy::fallible_impl_from)]
#![deny(clippy::inefficient_to_string)]
#![deny(clippy::large_digit_groups)]
#![deny(clippy::wildcard_dependencies)]
#![deny(clippy::wildcard_imports)]
#![deny(clippy::unused_self)]
#![deny(clippy::single_match_else)]
#![deny(clippy::option_option)]
#![deny(clippy::mut_mut)]

use anyhow::Context;
use duckdb::{params, Connection};
use petgraph::dot::Dot;
use std::{
    collections::HashMap,
    io,
    sync::atomic::{AtomicUsize, Ordering},
};
use tracing::info;

use crate::args::Args;
use shepherd_lib::{
    feed::Response,
    graph::Simulation as SimulationGraph,
    ids::{GraphId, ShepherdId},
    simulation::{Settings, Simulation, SimulationParts},
};

mod args;

fn main() -> anyhow::Result<()> {
    tracing_subscriber::fmt().with_writer(io::stderr).init();

    let Args {
        n_epochs,
        shepherds,
        database_file,
    } = args::parse_args().context("Unable to parse arguments")?;
    let mut shepherd_names = HashMap::new();

    let duckdb = if let Some(database_file) = database_file {
        Connection::open(database_file)
    } else {
        Connection::open_in_memory()
    }
    .context("Unable to open a duckdb connection")?;

    duckdb
        .execute_batch(
            "
            CREATE TYPE response AS ENUM ('positive', 'neutral', 'negative');
            CREATE TABLE ratings (
                sheep UINTEGER NOT NULL,
                shepherd UINTEGER NOT NULL,
                item UINTEGER NOT NULL,
                response response NOT NULL,
                hops UINTEGER,
                epoch UINTEGER NOT NULL,
                PRIMARY KEY (sheep, shepherd, item)
            );
            CREATE TABLE shepherds (
                id UINTEGER PRIMARY KEY,
                name VARCHAR
            );
            ",
        )
        .context("Unable to initialize duckdb")?;
    let epoch = AtomicUsize::new(0);

    let SimulationParts {
        graph: SimulationGraph(graph),
        ..
    } = {
        let mut simulation = Simulation::new(
            &mut rand::thread_rng(),
            shepherds,
            Settings {
                new_epoch_hook: Some(Box::new(|i, _| {
                    info!("starting epoch {:?}", i);
                    epoch.store(i.0, Ordering::Release);
                })),
                feed_generation_hook: Some(Box::new(|i, j, _| {
                    info!("a feed has been generated by shepherd {:?} for sheep {:?}", i, j);
                })),
                feed_rated_hook: Some(Box::new(|ShepherdId(i), GraphId(j, _), responses| {
                    info!("a feed generated by shepherd {:?} has been rated by sheep {:?}", i, j);

                    for (GraphId(k, _), response, hops) in &responses.0 {
                        duckdb
                            .execute(
                                "INSERT INTO ratings (sheep, shepherd, item, response, hops, epoch) VALUES (?, ?, ?, ?, ?, ?)",
                                params![j, i, k, match response {
                                    Response::Positive => "positive",
                                    Response::Neutral => "neutral",
                                    Response::Negative => "negative",
                                }, hops, epoch.load(Ordering::Acquire)]
                            )
                            .expect("Unable to insert a rating into the database");
                    }
                })),
                shepherd_assignment_hook: Some(Box::new(|new_shepherds| {
                    shepherd_names = new_shepherds;
                    for (id, name) in &shepherd_names {
                        duckdb
                            .execute(
                                "INSERT INTO shepherds (id, name) VALUES (?, ?)",
                                params![id.0, name]
                            )
                            .expect("Unable to update the shepherd name mappings");
                    }
                })),
                ..Default::default()
            },
        )
        .context("Unable to initialize the simulation")?;

        for _ in 0..n_epochs {
            simulation
                .simulate_epoch(&mut rand::thread_rng())
                .context("Unable to simulate an epoch")?;
        }

        simulation
            .stop()
            .context("Unable to cleanly stop the simulation")?
    };

    println!("{:?}", Dot::new(&graph));

    Ok(())
}
